import * as XLSX from 'xlsx';

export interface MonthlyMetrics {
  totalAssignments: number;
  completedAssignments: number;
  onTimeSubmissions: number;
  overdueSubmissions: number;
  notStartedAssignments: number;
  averageResponseTime: number;
  teamHealthScore: number;
  highRiskReports: number;
  caseClosures: number;
  completionRate: number;
  onTimeRate: number;
  qualityScore: number;
  totalMembers: number;
  monthOverMonthChange: {
    completionRate: number;
    onTimeRate: number;
    teamHealth: number;
    responseTime: number;
  };
}

export interface WeeklyBreakdown {
  week: string;
  assigned: number;
  completed: number;
  completionRate: number;
  onTimeRate: number;
  avgResponseTime: number;
}

export interface WorkerPerformance {
  id: string;
  name: string;
  assignments: number;
  completed: number;
  onTime: number;
  avgReadiness: number;
  avgFatigue: number;
  painReports: number;
  performanceRating: string;
}

export class ExcelExportService {
  static generateMonthlyReport(
    metrics: MonthlyMetrics,
    weeklyBreakdown: WeeklyBreakdown[],
    workerPerformance: WorkerPerformance[],
    selectedMonth: string,
    team: string
  ) {
    const monthName = new Date(selectedMonth + '-01').toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
    
    // Create Excel workbook with multiple sheets
    const workbook = XLSX.utils.book_new();
    
    // Sheet 1: Executive Summary
    const summaryData = this.generateSummarySheet(monthName, metrics, team);
    const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
    
    // Apply formatting to summary sheet
    this.applySummaryFormatting(summarySheet, summaryData);
    
    // Sheet 2: Weekly Breakdown
    const weeklyData = this.generateWeeklySheet(weeklyBreakdown);
    const weeklySheet = XLSX.utils.aoa_to_sheet(weeklyData);
    this.applyWeeklyFormatting(weeklySheet, weeklyData);
    
    // Sheet 3: Worker Performance
    const workerData = this.generateWorkerSheet(workerPerformance);
    const workerSheet = XLSX.utils.aoa_to_sheet(workerData);
    this.applyWorkerFormatting(workerSheet, workerData);
    
    // Add sheets to workbook
    XLSX.utils.book_append_sheet(workbook, summarySheet, 'Executive Summary');
    XLSX.utils.book_append_sheet(workbook, weeklySheet, 'Weekly Breakdown');
    XLSX.utils.book_append_sheet(workbook, workerSheet, 'Worker Performance');
    
    // Export as Excel file
    XLSX.writeFile(workbook, `Monthly_Report_${selectedMonth}.xlsx`);
  }

  private static generateSummarySheet(monthName: string, metrics: MonthlyMetrics, team: string): any[][] {
    const teamRating = this.getTeamRating(metrics);
    
    return [
      ['MONTHLY PERFORMANCE REPORT'],
      [''],
      ['Report Period:', monthName],
      ['Generated On:', new Date().toLocaleDateString('en-US')],
      ['Team:', team],
      ['Generated By:', 'Work Readiness System'],
      [''],
      ['EXECUTIVE SUMMARY'],
      [''],
      ['Metric', 'Value', 'Status'],
      ['Team Rating', `${teamRating.grade} (${teamRating.score.toFixed(1)}/100)`, teamRating.description],
      ['Total Assignments', metrics.totalAssignments, ''],
      ['Completed Assignments', metrics.completedAssignments, `${metrics.completionRate.toFixed(1)}%`],
      ['On-Time Submissions', metrics.onTimeSubmissions, `${metrics.onTimeRate.toFixed(1)}%`],
      ['Overdue Submissions', metrics.overdueSubmissions, `${((metrics.overdueSubmissions / metrics.totalAssignments) * 100).toFixed(1)}%`],
      ['Pending Assignments', metrics.notStartedAssignments, `${((metrics.notStartedAssignments / metrics.totalAssignments) * 100).toFixed(1)}%`],
      ['Average Response Time', `${metrics.averageResponseTime.toFixed(1)} hours`, ''],
      ['Team Health Score', `${metrics.teamHealthScore.toFixed(1)}%`, ''],
      ['Quality Score', `${metrics.qualityScore.toFixed(1)}%`, ''],
      ['Total Team Members', metrics.totalMembers, ''],
      ['High-Risk Reports', metrics.highRiskReports, ''],
      ['Case Closures', metrics.caseClosures, ''],
      [''],
      ['PERFORMANCE BREAKDOWN'],
      [''],
      ['KPI Component', 'Weight', 'Score', 'Contribution'],
      ['Completion Rate', '35%', `${metrics.completionRate.toFixed(1)}%`, `${(metrics.completionRate * 0.35).toFixed(1)} points`],
      ['On-Time Rate', '25%', `${metrics.onTimeRate.toFixed(1)}%`, `${(metrics.onTimeRate * 0.25).toFixed(1)} points`],
      ['Late Rate Penalty', '15%', `${((metrics.overdueSubmissions / metrics.totalAssignments) * 100).toFixed(1)}%`, `-${(metrics.overdueSubmissions / metrics.totalAssignments * 15).toFixed(1)} points`],
      ['Volume Bonus', '10%', `${metrics.totalAssignments} assignments`, `${Math.min(10, (metrics.totalAssignments / 100) * 10).toFixed(1)} points`],
      [''],
      ['GRADE SCALE REFERENCE'],
      [''],
      ['Grade Range', 'Description', 'Performance Level'],
      ['A+ to A- (90-100)', 'Outstanding to Very Good', 'Excellent'],
      ['B+ to B- (70-89)', 'Good to Average', 'Good'],
      ['C+ to C- (55-69)', 'Below Average to Poor', 'Needs Improvement'],
      ['D to F (0-54)', 'Very Poor to Critical', 'Critical Issues'],
      [''],
      ['KEY INSIGHTS'],
      [''],
      ['Insight', 'Value', 'Recommendation'],
      ['Overall Performance', teamRating.grade, teamRating.description],
      ['Completion Efficiency', `${metrics.completionRate.toFixed(1)}%`, metrics.completionRate >= 80 ? 'Maintain current performance' : 'Focus on improving completion rates'],
      ['Timeliness', `${metrics.onTimeRate.toFixed(1)}%`, metrics.onTimeRate >= 75 ? 'Good timeliness performance' : 'Improve deadline adherence'],
      ['Team Health', `${metrics.teamHealthScore.toFixed(1)}%`, metrics.teamHealthScore >= 70 ? 'Healthy team dynamics' : 'Monitor team wellness'],
      ['Response Efficiency', `${metrics.averageResponseTime.toFixed(1)} hours`, metrics.averageResponseTime <= 24 ? 'Excellent response time' : 'Optimize response processes'],
      [''],
      ['RECOMMENDATIONS'],
      [''],
      ['Priority', 'Action Item', 'Expected Impact'],
      ['High', metrics.completionRate < 80 ? 'Improve assignment completion processes' : 'Maintain current completion standards', 'Increase overall team rating'],
      ['Medium', metrics.onTimeRate < 75 ? 'Implement deadline tracking system' : 'Continue current timeliness practices', 'Reduce late submissions'],
      ['Low', metrics.teamHealthScore < 70 ? 'Conduct team wellness assessment' : 'Continue team health monitoring', 'Improve team satisfaction'],
      [''],
      ['REPORT FOOTER'],
      [''],
      ['This report is generated automatically by the Work Readiness System.'],
      ['For questions or clarifications, contact your team leader or system administrator.'],
      ['Report generated on:', new Date().toLocaleString('en-US')]
    ];
  }

  private static generateWeeklySheet(weeklyBreakdown: WeeklyBreakdown[]): any[][] {
    return [
      ['WEEKLY PERFORMANCE BREAKDOWN'],
      [''],
      ['Week', 'Assigned', 'Completed', 'Completion Rate (%)', 'On-Time Rate (%)', 'Avg Response Time (hours)'],
      ...weeklyBreakdown.map(week => [
        week.week,
        week.assigned,
        week.completed,
        week.completionRate.toFixed(1),
        week.onTimeRate.toFixed(1),
        week.avgResponseTime.toFixed(1)
      ])
    ];
  }

  private static generateWorkerSheet(workerPerformance: WorkerPerformance[]): any[][] {
    return [
      ['WORKER PERFORMANCE RANKING'],
      [''],
      ['Rank', 'Worker Name', 'Total Assignments', 'Completed', 'On-Time', 'Avg Readiness (%)', 'Avg Fatigue (/10)', 'Pain Reports', 'Performance Rating'],
      ...workerPerformance.map((worker, index) => {
        const rank = index + 1;
        return [
          rank,
          worker.name,
          worker.assignments,
          worker.completed,
          worker.onTime,
          worker.avgReadiness.toFixed(1),
          worker.avgFatigue.toFixed(1),
          worker.painReports,
          worker.performanceRating
        ];
      })
    ];
  }

  private static getTeamRating(metrics: MonthlyMetrics) {
    const completionRate = metrics.completionRate;
    const onTimeRate = metrics.onTimeRate;
    const qualityScore = 70; // Default quality score
    const pendingBonus = 0; // No pending bonus for monthly tracking
    const overduePenalty = Math.min(10, (metrics.overdueSubmissions / metrics.totalAssignments) * 10);
    
    // Calculate weighted score using backend KPI formula
    const weightedScore = (completionRate * 0.7) + (onTimeRate * 0.2) + (qualityScore * 0.1) + pendingBonus - overduePenalty;
    
    // Convert to letter grade using backend KPI scale
    let letterGrade = '';
    let color = '';
    let description = '';
    
    if (weightedScore >= 95) { letterGrade = 'A+'; color = '#10b981'; description = 'Outstanding Performance'; }
    else if (weightedScore >= 90) { letterGrade = 'A'; color = '#10b981'; description = 'Excellent Performance'; }
    else if (weightedScore >= 85) { letterGrade = 'A-'; color = '#10b981'; description = 'Very Good Performance'; }
    else if (weightedScore >= 80) { letterGrade = 'B+'; color = '#3b82f6'; description = 'Good Performance'; }
    else if (weightedScore >= 75) { letterGrade = 'B'; color = '#3b82f6'; description = 'Above Average Performance'; }
    else if (weightedScore >= 70) { letterGrade = 'B-'; color = '#3b82f6'; description = 'Average Performance'; }
    else if (weightedScore >= 65) { letterGrade = 'C+'; color = '#eab308'; description = 'Below Average Performance'; }
    else if (weightedScore >= 60) { letterGrade = 'C'; color = '#eab308'; description = 'Needs Improvement'; }
    else if (weightedScore >= 55) { letterGrade = 'C-'; color = '#f97316'; description = 'Poor Performance'; }
    else if (weightedScore >= 50) { letterGrade = 'D'; color = '#f97316'; description = 'Very Poor Performance'; }
    else { letterGrade = 'F'; color = '#ef4444'; description = 'Critical Performance Issues'; }
    
    return {
      grade: letterGrade,
      score: Math.max(0, Math.min(100, weightedScore)),
      color,
      description
    };
  }

  private static applySummaryFormatting(sheet: XLSX.WorkSheet, data: any[][]) {
    // Set column widths
    sheet['!cols'] = [
      { wch: 28 }, // Column A
      { wch: 18 }, // Column B
      { wch: 35 }  // Column C
    ];
    
    // Apply styles to specific cells
    const range = XLSX.utils.decode_range(sheet['!ref'] || 'A1');
    
    for (let row = range.s.r; row <= range.e.r; row++) {
      for (let col = range.s.c; col <= range.e.c; col++) {
        const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
        
        if (!sheet[cellAddress]) continue;
        
        // Main title formatting
        if (row === 0) {
          sheet[cellAddress].s = {
            font: { bold: true, size: 16, color: { rgb: 'FFFFFF' } },
            fill: { fgColor: { rgb: '1E40AF' } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: '1E40AF' } },
              bottom: { style: 'thin', color: { rgb: '1E40AF' } },
              left: { style: 'thin', color: { rgb: '1E40AF' } },
              right: { style: 'thin', color: { rgb: '1E40AF' } }
            }
          };
        }
        
        // Section headers formatting
        if (data[row]?.[0] === 'EXECUTIVE SUMMARY' || data[row]?.[0] === 'PERFORMANCE BREAKDOWN' || data[row]?.[0] === 'GRADE SCALE REFERENCE' || data[row]?.[0] === 'KEY INSIGHTS' || data[row]?.[0] === 'RECOMMENDATIONS' || data[row]?.[0] === 'REPORT FOOTER') {
          sheet[cellAddress].s = {
            font: { bold: true, size: 14, color: { rgb: 'FFFFFF' } },
            fill: { fgColor: { rgb: '3B82F6' } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: '3B82F6' } },
              bottom: { style: 'thin', color: { rgb: '3B82F6' } },
              left: { style: 'thin', color: { rgb: '3B82F6' } },
              right: { style: 'thin', color: { rgb: '3B82F6' } }
            }
          };
        }
        
        // Table headers formatting
        if (data[row]?.[0] === 'Metric' || data[row]?.[0] === 'KPI Component' || data[row]?.[0] === 'Grade Range' || data[row]?.[0] === 'Insight' || data[row]?.[0] === 'Priority') {
          sheet[cellAddress].s = {
            font: { bold: true, size: 12, color: { rgb: 'FFFFFF' } },
            fill: { fgColor: { rgb: '6366F1' } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: '6366F1' } },
              bottom: { style: 'thin', color: { rgb: '6366F1' } },
              left: { style: 'thin', color: { rgb: '6366F1' } },
              right: { style: 'thin', color: { rgb: '6366F1' } }
            }
          };
        }
        
        // Metric labels formatting
        if (col === 0 && row > 8 && data[row]?.[0] && typeof data[row][0] === 'string' && !data[row][0].includes(':') && !data[row][0].includes('EXECUTIVE') && !data[row][0].includes('PERFORMANCE') && !data[row][0].includes('GRADE')) {
          sheet[cellAddress].s = {
            font: { bold: true, size: 11, color: { rgb: '374151' } },
            fill: { fgColor: { rgb: 'F8FAFC' } },
            alignment: { horizontal: 'left', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: 'E5E7EB' } },
              bottom: { style: 'thin', color: { rgb: 'E5E7EB' } },
              left: { style: 'thin', color: { rgb: 'E5E7EB' } },
              right: { style: 'thin', color: { rgb: 'E5E7EB' } }
            }
          };
        }
        
        // Values formatting
        if (col === 1 && typeof data[row]?.[1] === 'number') {
          sheet[cellAddress].s = {
            font: { bold: true, size: 11, color: { rgb: '1F2937' } },
            fill: { fgColor: { rgb: 'FFFFFF' } },
            alignment: { horizontal: 'right', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: 'E5E7EB' } },
              bottom: { style: 'thin', color: { rgb: 'E5E7EB' } },
              left: { style: 'thin', color: { rgb: 'E5E7EB' } },
              right: { style: 'thin', color: { rgb: 'E5E7EB' } }
            }
          };
        }
        
        // Status/Description formatting
        if (col === 2 && data[row]?.[2] && typeof data[row][2] === 'string') {
          sheet[cellAddress].s = {
            font: { size: 11, color: { rgb: '6B7280' } },
            fill: { fgColor: { rgb: 'FFFFFF' } },
            alignment: { horizontal: 'left', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: 'E5E7EB' } },
              bottom: { style: 'thin', color: { rgb: 'E5E7EB' } },
              left: { style: 'thin', color: { rgb: 'E5E7EB' } },
              right: { style: 'thin', color: { rgb: 'E5E7EB' } }
            }
          };
        }
        
        // Report info formatting
        if (data[row]?.[0] && typeof data[row][0] === 'string' && data[row][0].includes(':')) {
          sheet[cellAddress].s = {
            font: { size: 11, color: { rgb: '4B5563' } },
            fill: { fgColor: { rgb: 'F9FAFB' } },
            alignment: { horizontal: 'left', vertical: 'center' }
          };
        }
      }
    }
  }

  private static applyWeeklyFormatting(sheet: XLSX.WorkSheet, data: any[][]) {
    // Set column widths
    sheet['!cols'] = [
      { wch: 12 }, // Week
      { wch: 15 }, // Assigned
      { wch: 15 }, // Completed
      { wch: 18 }, // Completion Rate
      { wch: 16 }, // On-Time Rate
      { wch: 20 }  // Avg Response Time
    ];
    
    const range = XLSX.utils.decode_range(sheet['!ref'] || 'A1');
    
    for (let row = range.s.r; row <= range.e.r; row++) {
      for (let col = range.s.c; col <= range.e.c; col++) {
        const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
        
        if (!sheet[cellAddress]) continue;
        
        // Title formatting
        if (row === 0) {
          sheet[cellAddress].s = {
            font: { bold: true, size: 16, color: { rgb: 'FFFFFF' } },
            fill: { fgColor: { rgb: '059669' } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: '059669' } },
              bottom: { style: 'thin', color: { rgb: '059669' } },
              left: { style: 'thin', color: { rgb: '059669' } },
              right: { style: 'thin', color: { rgb: '059669' } }
            }
          };
        }
        
        // Header row formatting
        if (row === 2) {
          sheet[cellAddress].s = {
            font: { bold: true, size: 12, color: { rgb: 'FFFFFF' } },
            fill: { fgColor: { rgb: '10B981' } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: '10B981' } },
              bottom: { style: 'thin', color: { rgb: '10B981' } },
              left: { style: 'thin', color: { rgb: '10B981' } },
              right: { style: 'thin', color: { rgb: '10B981' } }
            }
          };
        }
        
        // Data rows formatting
        if (row > 2) {
          const isEvenRow = (row - 3) % 2 === 0;
          sheet[cellAddress].s = {
            font: { size: 11, color: { rgb: '374151' } },
            fill: { fgColor: { rgb: isEvenRow ? 'FFFFFF' : 'F8FAFC' } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: 'E5E7EB' } },
              bottom: { style: 'thin', color: { rgb: 'E5E7EB' } },
              left: { style: 'thin', color: { rgb: 'E5E7EB' } },
              right: { style: 'thin', color: { rgb: 'E5E7EB' } }
            }
          };
        }
      }
    }
  }

  private static applyWorkerFormatting(sheet: XLSX.WorkSheet, data: any[][]) {
    // Set column widths
    sheet['!cols'] = [
      { wch: 8 },  // Rank
      { wch: 20 }, // Worker Name
      { wch: 15 }, // Total Assignments
      { wch: 12 }, // Completed
      { wch: 12 }, // On-Time
      { wch: 16 }, // Avg Readiness
      { wch: 14 }, // Avg Fatigue
      { wch: 12 }, // Pain Reports
      { wch: 18 }  // Performance Rating
    ];
    
    const range = XLSX.utils.decode_range(sheet['!ref'] || 'A1');
    
    for (let row = range.s.r; row <= range.e.r; row++) {
      for (let col = range.s.c; col <= range.e.c; col++) {
        const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
        
        if (!sheet[cellAddress]) continue;
        
        // Title formatting
        if (row === 0) {
          sheet[cellAddress].s = {
            font: { bold: true, size: 16, color: { rgb: 'FFFFFF' } },
            fill: { fgColor: { rgb: '7C3AED' } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: '7C3AED' } },
              bottom: { style: 'thin', color: { rgb: '7C3AED' } },
              left: { style: 'thin', color: { rgb: '7C3AED' } },
              right: { style: 'thin', color: { rgb: '7C3AED' } }
            }
          };
        }
        
        // Header row formatting
        if (row === 2) {
          sheet[cellAddress].s = {
            font: { bold: true, size: 12, color: { rgb: 'FFFFFF' } },
            fill: { fgColor: { rgb: '8B5CF6' } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: '8B5CF6' } },
              bottom: { style: 'thin', color: { rgb: '8B5CF6' } },
              left: { style: 'thin', color: { rgb: '8B5CF6' } },
              right: { style: 'thin', color: { rgb: '8B5CF6' } }
            }
          };
        }
        
        // Data rows formatting
        if (row > 2) {
          const isEvenRow = (row - 3) % 2 === 0;
          sheet[cellAddress].s = {
            font: { size: 11, color: { rgb: '374151' } },
            fill: { fgColor: { rgb: isEvenRow ? 'FFFFFF' : 'F8FAFC' } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: 'thin', color: { rgb: 'E5E7EB' } },
              bottom: { style: 'thin', color: { rgb: 'E5E7EB' } },
              left: { style: 'thin', color: { rgb: 'E5E7EB' } },
              right: { style: 'thin', color: { rgb: 'E5E7EB' } }
            }
          };
        }
      }
    }
  }
}
