import React, { useState, useEffect, useCallback, useMemo, memo } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Alert,
  CircularProgress,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Avatar,
  Tooltip,
  Pagination,
} from '@mui/material';
import {
  Add,
  Edit,
  Visibility,
  CalendarToday,
  Schedule,
  LocationOn,
  CheckCircle,
  Cancel,
  Warning,
  PlayArrow,
  Assessment,
  LocalHospital,
  VideoCall,
  Home,
  Work,
  ContentCopy,
  Delete,
  Download,
  Event,
} from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext.supabase';
import LayoutWithSidebar from '../components/LayoutWithSidebar';
import backendApi from '../utils/backendApi';
import { SupabaseAPI } from '../utils/supabaseApi';

// Security utilities
const sanitizeInput = (input: string): string => {
  return input.replace(/[<>"'&]/g, (match) => {
    const escapeMap: { [key: string]: string } = {
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '&': '&amp;'
    };
    return escapeMap[match];
  });
};

const validateAppointmentForm = (form: any): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];
  
  if (!form.case || typeof form.case !== 'string') {
    errors.push('Please select a valid case');
  }
  
  if (!form.appointmentType || typeof form.appointmentType !== 'string') {
    errors.push('Appointment type is required');
  }
  
  if (!form.scheduledDate || typeof form.scheduledDate !== 'string') {
    errors.push('Scheduled date is required');
  } else {
    const selectedDate = new Date(form.scheduledDate);
    const now = new Date();
    if (selectedDate <= now) {
      errors.push('Scheduled date must be in the future');
    }
  }
  
  if (form.duration && (typeof form.duration !== 'number' || form.duration < 15 || form.duration > 480)) {
    errors.push('Duration must be between 15 and 480 minutes');
  }
  
  if (form.purpose && typeof form.purpose === 'string' && form.purpose.length > 500) {
    errors.push('Purpose cannot exceed 500 characters');
  }
  
  if (form.notes && typeof form.notes === 'string' && form.notes.length > 1000) {
    errors.push('Notes cannot exceed 1000 characters');
  }
  
  return { isValid: errors.length === 0, errors };
};

interface Appointment {
  _id: string;
  case: {
    _id: string;
    caseNumber: string;
    worker: {
      _id: string;
      firstName: string;
      lastName: string;
      email: string;
    };
  };
  clinician: {
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
  };
  worker: {
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
  };
  appointmentType: string;
  scheduledDate: string;
  duration: number;
  location: string;
  status: string;
  purpose: string;
  notes?: string;
  telehealthInfo?: {
    platform: string;
    meetingId: string;
    meetingUrl: string;
    password: string;
    instructions: string;
    zoomMeeting: {
      id: string;
      topic: string;
      startTime: string;
      duration: number;
      joinUrl: string;
      password: string;
      meetingId: string;
      hostId: string;
      createdAt: string;
      status: string;
    };
  };
  createdAt: string;
  updatedAt: string;
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`appointment-tabpanel-${index}`}
      aria-labelledby={`appointment-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ 
          p: 3,
          backgroundColor: 'white',
          minHeight: 400
        }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const Appointments: React.FC = memo(() => {
  const { user } = useAuth();
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [cases, setCases] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [authError, setAuthError] = useState<string | null>(null);
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalAppointments, setTotalAppointments] = useState(0);
  const [pageSize, setPageSize] = useState(15);
  const [tabValue, setTabValue] = useState(0);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [viewDetailsOpen, setViewDetailsOpen] = useState(false);
  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);
  const [isCreating, setIsCreating] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  
  
  // Tab state for organizing appointments by date
  const [activeTab, setActiveTab] = useState(0);
  
  // Sync activeTab with tabValue initially
  useEffect(() => {
    setActiveTab(tabValue);
  }, []);
  
  // Optimized function to organize appointments by date with useMemo
  const organizedAppointments = useMemo(() => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const nextWeek = new Date(today);
    nextWeek.setDate(nextWeek.getDate() + 7);
    
    return {
      today: appointments.filter(apt => {
        const aptDate = new Date(apt.scheduledDate);
        aptDate.setHours(0, 0, 0, 0);
        return aptDate.getTime() === today.getTime();
      }),
      tomorrow: appointments.filter(apt => {
        const aptDate = new Date(apt.scheduledDate);
        aptDate.setHours(0, 0, 0, 0);
        return aptDate.getTime() === tomorrow.getTime();
      }),
      thisWeek: appointments.filter(apt => {
        const aptDate = new Date(apt.scheduledDate);
        aptDate.setHours(0, 0, 0, 0);
        return aptDate >= tomorrow && aptDate < nextWeek;
      }),
      upcoming: appointments.filter(apt => {
        const aptDate = new Date(apt.scheduledDate);
        aptDate.setHours(0, 0, 0, 0);
        return aptDate >= nextWeek;
      })
    };
  }, [appointments]);
  
  // Form state
  const [formData, setFormData] = useState({
    case: '',
    worker: '',
    appointmentType: 'assessment',
    scheduledDate: '',
    duration: 60,
    location: 'clinic',
    purpose: '',
    notes: ''
  });

  // Check if user is a worker
  const isWorker = user?.role === 'worker';
  
  // Debug logging - only log when user changes to prevent spam
  React.useEffect(() => {
    console.log('Appointments component render:', { 
      user: user?.email, 
      role: user?.role, 
      isWorker, 
      tabValue,
      appointmentsCount: appointments.length,
      scheduledCount: appointments.filter(apt => apt.status === 'scheduled').length,
      confirmedCount: appointments.filter(apt => apt.status === 'confirmed').length,
      completedCount: appointments.filter(apt => apt.status === 'completed').length,
      allAppointments: appointments.map(apt => ({
        id: apt._id,
        status: apt.status,
        scheduledDate: apt.scheduledDate,
        clinician: apt.clinician?.firstName + ' ' + apt.clinician?.lastName
      }))
    });
  }, [user?.email, user?.role, isWorker, tabValue, appointments]);

  const fetchAppointments = useCallback(async (page = currentPage, limit = pageSize) => {
    if (isRefreshing) return; // Prevent multiple simultaneous requests
    
    try {
      setLoading(true);
      setAuthError(null); // Clear previous auth errors
      
      const response = await backendApi.get(`/appointments?page=${page}&limit=${limit}`);
      
      // Sanitize appointment data
      const sanitizedAppointments = (response.data.appointments || []).map((apt: any) => ({
        ...apt,
        purpose: apt.purpose ? sanitizeInput(apt.purpose) : '',
        notes: apt.notes ? sanitizeInput(apt.notes) : '',
        worker: apt.worker ? {
          ...apt.worker,
          firstName: sanitizeInput(apt.worker.firstName || ''),
          lastName: sanitizeInput(apt.worker.lastName || ''),
          email: sanitizeInput(apt.worker.email || '')
        } : null,
        clinician: apt.clinician ? {
          ...apt.clinician,
          firstName: sanitizeInput(apt.clinician.firstName || ''),
          lastName: sanitizeInput(apt.clinician.lastName || ''),
          email: sanitizeInput(apt.clinician.email || '')
        } : null
      }));
      
      setAppointments(sanitizedAppointments);
      
      // Update pagination info
      if (response.data.pagination) {
        setTotalPages(response.data.pagination.pages || 1);
        setTotalAppointments(response.data.pagination.total || 0);
      }
    } catch (err: any) {
      console.error('Error fetching appointments:', err);
      
      if (err.response?.status === 401) {
        setAuthError('Authentication failed. Please refresh the page or log in again.');
        setAppointments([]);
      } else {
        setError(err.response?.data?.message || 'Failed to fetch appointments');
      }
    } finally {
      setLoading(false);
    }
  }, [currentPage, pageSize, isRefreshing]);

  useEffect(() => {
    if (user) {
      fetchAppointments(currentPage, pageSize);
      // Only fetch cases and workers if user is not a worker
      if (!isWorker) {
        fetchCases();
      }
    }
  }, [user, user?.email, user?.role, isWorker, currentPage, pageSize, fetchAppointments]); // Include all dependencies

  // Test backend connection on component mount
  useEffect(() => {
    const testConnection = async () => {
      try {
        const { testBackendConnection } = await import('../utils/backendApi');
        const result = await testBackendConnection();
        if (result.success) {
          console.log('Backend connection test successful:', result.data);
        } else {
          console.error('Backend connection test failed:', result.error);
        }
      } catch (error) {
        console.error('Backend connection test failed:', error);
      }
    };
    testConnection();
  }, []);

  const fetchCases = async () => {
    try {
      const response = await SupabaseAPI.getCases();
      // Transform data to match expected format
      const casesData = response.cases.map((c: any) => ({
        _id: c.id,
        id: c.id,
        caseNumber: c.case_number,
        status: c.status,
        worker: c.worker ? {
          _id: c.worker.id,
          id: c.worker.id,
          firstName: c.worker.first_name,
          lastName: c.worker.last_name,
          email: c.worker.email,
          phone: c.worker.phone
        } : null,
        clinician: c.clinician ? {
          _id: c.clinician.id,
          id: c.clinician.id,
          firstName: c.clinician.first_name,
          lastName: c.clinician.last_name,
          email: c.clinician.email,
          phone: c.clinician.phone
        } : null,
        case_manager: c.case_manager ? {
          _id: c.case_manager.id,
          id: c.case_manager.id,
          firstName: c.case_manager.first_name,
          lastName: c.case_manager.last_name,
          email: c.case_manager.email
        } : null,
        employer: c.employer ? {
          _id: c.employer.id,
          id: c.employer.id,
          firstName: c.employer.first_name,
          lastName: c.employer.last_name,
          email: c.employer.email
        } : null
      }));
      setCases(casesData);
    } catch (err: any) {
      console.error('Failed to fetch cases:', err);
    }
  };

  // Pagination handlers
  const handlePageChange = (event: React.ChangeEvent<unknown>, page: number) => {
    setCurrentPage(page);
  };

  const handlePageSizeChange = (event: any) => {
    setPageSize(Number(event.target.value));
    setCurrentPage(1); // Reset to first page when changing page size
  };


  const handleCreateAppointment = async () => {
    try {
      setIsCreating(true);
      setError('');
      
      // Enhanced validation with security
      const validation = validateAppointmentForm(formData);
      if (!validation.isValid) {
        setError(validation.errors.join(', '));
        return;
      }
      
      // Get worker ID from selected case
      const selectedCase = cases.find(c => c._id === formData.case);
      console.log('Selected case:', selectedCase);
      
      if (!selectedCase) {
        setError('Please select a case');
        return;
      }
      
      // Check if case has a clinician assigned
      if (!selectedCase.clinician || !selectedCase.clinician._id) {
        setError('Selected case does not have a clinician assigned. Please assign a clinician to the case first.');
        console.log('No clinician found in case:', selectedCase);
        return;
      }

      console.log('Creating appointment with data:', {
        case: formData.case,
        worker: selectedCase.worker?._id,
        clinician: selectedCase.clinician?._id,
        appointmentType: formData.appointmentType,
        scheduledDate: formData.scheduledDate,
        duration: formData.duration,
        location: formData.location
      });

      // Prepare appointment data with sanitization
      const appointmentData = {
        case: formData.case,
        worker: selectedCase.worker._id,
        clinician: selectedCase.clinician._id,
        appointmentType: sanitizeInput(formData.appointmentType),
        scheduledDate: formData.scheduledDate,
        duration: Math.min(Math.max(formData.duration || 60, 15), 480), // Clamp between 15-480 minutes
        location: sanitizeInput(formData.location || 'clinic'),
        purpose: formData.purpose ? sanitizeInput(formData.purpose.trim()) : '',
        notes: formData.notes ? sanitizeInput(formData.notes.trim()) : '',
        isVirtual: formData.location === 'telehealth'
      };

      await backendApi.post('/appointments', appointmentData);
      
      setDialogOpen(false);
      resetForm();
      fetchAppointments(currentPage, pageSize);
      
      // Clear any previous errors and show success message
      setError('');
      const workerName = `${selectedCase.worker.firstName} ${selectedCase.worker.lastName}`;
      const caseNumber = selectedCase.caseNumber;
      const appointmentType = formData.appointmentType.replace('_', ' ');
      const appointmentDate = new Date(formData.scheduledDate).toLocaleString();
      const appointmentLocation = formData.location === 'telehealth' ? 'via telehealth' : `at ${formData.location}`;
      
      setSuccessMessage(`✅ Appointment created successfully! ${(appointmentType?.charAt?.(0) || '').toUpperCase() + (appointmentType?.slice?.(1) || appointmentType || '')} appointment scheduled for ${workerName} (Case ${caseNumber}) on ${appointmentDate} ${appointmentLocation}. The worker will be notified about the appointment.`);
      setTimeout(() => setSuccessMessage(''), 8000);
    } catch (err: any) {
      console.error('Create appointment error:', err);
      console.error('Error response:', err.response?.data);
      
      if (err.response?.status === 401) {
        setAuthError('Authentication failed. Please refresh the page or log in again.');
      } else {
        setError(err.response?.data?.message || err.message || 'Failed to create appointment');
      }
    } finally {
      setIsCreating(false);
    }
  };

  const handleUpdateAppointment = async () => {
    if (!selectedAppointment) return;
    
    try {
      setIsUpdating(true);
      setError('');
      
      // Enhanced validation with security
      const validation = validateAppointmentForm(formData);
      if (!validation.isValid) {
        setError(validation.errors.join(', '));
        return;
      }
      
      const updateData = {
        appointmentType: sanitizeInput(formData.appointmentType),
        scheduledDate: formData.scheduledDate,
        duration: Math.min(Math.max(formData.duration || 60, 15), 480), // Clamp duration
        location: sanitizeInput(formData.location || 'clinic'),
        purpose: formData.purpose ? sanitizeInput(formData.purpose.trim()) : '',
        notes: formData.notes ? sanitizeInput(formData.notes.trim()) : ''
      };

      console.log('Updating appointment with data:', updateData);
      console.log('Appointment ID:', selectedAppointment._id);

      await backendApi.put(`/appointments/${selectedAppointment._id}`, updateData);
      
      setDialogOpen(false);
      setSelectedAppointment(null);
      resetForm();
      fetchAppointments(currentPage, pageSize);
      
      // Show success message
      setError('');
      const workerName = `${selectedAppointment.worker.firstName} ${selectedAppointment.worker.lastName}`;
      const appointmentType = formData.appointmentType.replace('_', ' ');
      const appointmentDate = new Date(formData.scheduledDate).toLocaleString();
      
      setSuccessMessage(`✅ Appointment updated successfully! ${(appointmentType?.charAt?.(0) || '').toUpperCase() + (appointmentType?.slice?.(1) || appointmentType || '')} appointment for ${workerName} has been updated. New schedule: ${appointmentDate}.`);
      setTimeout(() => setSuccessMessage(''), 6000);
    } catch (err: any) {
      console.error('Update appointment error:', err);
      console.error('Error response:', err.response?.data);
      
      if (err.response?.status === 401) {
        setAuthError('Authentication failed. Please refresh the page or log in again.');
      } else {
        setError(err.response?.data?.message || err.message || 'Failed to update appointment');
      }
    } finally {
      setIsUpdating(false);
    }
  };

  const handleStatusUpdate = async (appointmentId: string, newStatus: string) => {
    try {
      await backendApi.put(`/appointments/${appointmentId}/status`, { status: newStatus });
      fetchAppointments(currentPage, pageSize);
      
      // Show success message
      setError('');
      const appointment = appointments.find(apt => apt._id === appointmentId);
      const workerName = appointment?.worker ? `${appointment.worker.firstName} ${appointment.worker.lastName}` : 'worker';
      const statusText = newStatus.replace('_', ' ');
      
      setSuccessMessage(`✅ Appointment status updated! ${workerName}'s appointment status has been changed to "${statusText}".`);
      setTimeout(() => setSuccessMessage(''), 5000);
    } catch (err: any) {
      setError(err.response?.data?.message || 'Failed to update appointment status');
    }
  };

  const handleConfirmAppointment = async (appointmentId: string) => {
    try {
      await backendApi.put(`/appointments/${appointmentId}/status`, { status: 'confirmed' });
      
      // Update local state immediately for better UX
      setAppointments(prev => prev.map(apt => 
        apt._id === appointmentId ? { ...apt, status: 'confirmed' } : apt
      ));
      
      // Show success message
      setError('');
      const appointment = appointments.find(apt => apt._id === appointmentId);
      const workerName = appointment?.worker ? `${appointment.worker.firstName} ${appointment.worker.lastName}` : 'worker';
      
      setSuccessMessage(`✅ Appointment confirmed! ${workerName}'s appointment has been confirmed and they will be notified.`);
      setTimeout(() => setSuccessMessage(''), 5000);
      
      // Refresh data in background
      fetchAppointments(currentPage, pageSize);
    } catch (err: any) {
      setError(err.response?.data?.message || 'Failed to confirm appointment');
    }
  };

  const handleDeclineAppointment = async (appointmentId: string) => {
    try {
      await backendApi.put(`/appointments/${appointmentId}/status`, { 
        status: 'cancelled',
        cancellationReason: 'Declined by worker'
      });
      
      // Update local state immediately for better UX
      setAppointments(prev => prev.map(apt => 
        apt._id === appointmentId ? { ...apt, status: 'cancelled' } : apt
      ));
      
      // Show success message
      setError('');
      const appointment = appointments.find(apt => apt._id === appointmentId);
      const workerName = appointment?.worker ? `${appointment.worker.firstName} ${appointment.worker.lastName}` : 'worker';
      
      setSuccessMessage(`✅ Appointment declined! ${workerName}'s appointment has been cancelled and they will be notified.`);
      setTimeout(() => setSuccessMessage(''), 5000);
      
      // Refresh data in background
      fetchAppointments(currentPage, pageSize);
    } catch (err: any) {
      setError(err.response?.data?.message || 'Failed to decline appointment');
    }
  };

  const handleDeleteAppointment = async (appointmentId: string) => {
    if (!window.confirm('Are you sure you want to delete this appointment? This action cannot be undone and will also delete the associated Zoom meeting.')) {
      return;
    }

    try {
      await backendApi.delete(`/appointments/${appointmentId}`);
      fetchAppointments(currentPage, pageSize);
      setError(''); // Clear any previous errors
    } catch (err: any) {
      setError(err.response?.data?.message || 'Failed to delete appointment');
    }
  };

  const resetForm = () => {
    setFormData({
      case: '',
      worker: '',
      appointmentType: 'assessment',
      scheduledDate: '',
      duration: 60,
      location: 'clinic',
      purpose: '',
      notes: ''
    });
  };

  const openCreateDialog = () => {
    setSelectedAppointment(null);
    resetForm();
    setDialogOpen(true);
  };

  const openEditDialog = (appointment: Appointment) => {
    setSelectedAppointment(appointment);
    setFormData({
      case: appointment.case._id,
      worker: appointment.worker._id,
      appointmentType: appointment.appointmentType,
      scheduledDate: new Date(appointment.scheduledDate).toISOString().slice(0, 16),
      duration: appointment.duration,
      location: appointment.location,
      purpose: appointment.purpose,
      notes: appointment.notes || ''
    });
    setDialogOpen(true);
  };

  const openViewDetailsDialog = (appointment: Appointment) => {
    setSelectedAppointment(appointment);
    setViewDetailsOpen(true);
  };

  const getStatusColor = (status: string) => {
    const colors: { [key: string]: any } = {
      'scheduled': 'info',
      'confirmed': 'primary',
      'in_progress': 'warning',
      'completed': 'success',
      'cancelled': 'error',
      'no_show': 'error',
    };
    return colors[status] || 'default';
  };

  const getStatusIcon = (status: string): React.ReactElement => {
    switch (status) {
      case 'scheduled': return <Schedule />;
      case 'confirmed': return <CheckCircle />;
      case 'in_progress': return <PlayArrow />;
      case 'completed': return <CheckCircle />;
      case 'cancelled': return <Cancel />;
      case 'no_show': return <Warning />;
      default: return <Schedule />;
    }
  };

  const getLocationIcon = (location: string) => {
    switch (location) {
      case 'clinic': return <LocalHospital />;
      case 'telehealth': return <VideoCall />;
      case 'workplace': return <Work />;
      case 'home': return <Home />;
      default: return <LocationOn />;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  const formatTime = (dateString: string) => {
    return new Date(dateString).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      // You could add a toast notification here
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  // Memoized calculations for better performance
  const upcomingAppointments = useMemo(() => {
    const now = new Date();
    return appointments.filter(apt => 
      new Date(apt.scheduledDate) > now && 
      ['scheduled', 'confirmed'].includes(apt.status)
    ).sort((a, b) => new Date(a.scheduledDate).getTime() - new Date(b.scheduledDate).getTime());
  }, [appointments]);

  const todayAppointments = useMemo(() => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    return appointments.filter(apt => {
      const aptDate = new Date(apt.scheduledDate);
      return aptDate >= today && aptDate < tomorrow;
    }).sort((a, b) => new Date(a.scheduledDate).getTime() - new Date(b.scheduledDate).getTime());
  }, [appointments]);

  // Memoized appointment statistics
  const appointmentStats = useMemo(() => {
    return {
      scheduled: appointments.filter(apt => apt.status === 'scheduled').length,
      confirmed: appointments.filter(apt => apt.status === 'confirmed').length,
      completed: appointments.filter(apt => apt.status === 'completed').length,
      cancelled: appointments.filter(apt => apt.status === 'cancelled').length,
      today: todayAppointments.length,
      upcoming: upcomingAppointments.length
    };
  }, [appointments, todayAppointments, upcomingAppointments]);

  const downloadAppointmentsAsExcel = () => {
    // Create CSV content
    const headers = [
      'Date',
      'Time',
      'Patient Name',
      'Case Number',
      'Appointment Type',
      'Status',
      'Duration (min)',
      'Location',
      'Notes'
    ];

    const csvContent = [
      headers.join(','),
      ...appointments.map(appointment => {
        const date = new Date(appointment.scheduledDate);
        const dateStr = date.toLocaleDateString();
        const timeStr = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        return [
          `"${dateStr}"`,
          `"${timeStr}"`,
          `"${appointment.worker?.firstName || 'N/A'} ${appointment.worker?.lastName || ''}"`,
          `"${appointment.case.caseNumber}"`,
          `"${appointment.appointmentType.replace('_', ' ')}"`,
          `"${appointment.status.replace('_', ' ')}"`,
          `"${appointment.duration}"`,
          `"${appointment.location || 'N/A'}"`,
          `"${appointment.notes || 'N/A'}"`
        ].join(',');
      })
    ].join('\n');

    // Create and download file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `appointments_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Don't render until user is loaded
  if (!user) {
    return (
      <LayoutWithSidebar>
        <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
          <CircularProgress />
        </Box>
      </LayoutWithSidebar>
    );
  }

  if (loading) {
    return (
      <LayoutWithSidebar>
        <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
          <CircularProgress />
        </Box>
      </LayoutWithSidebar>
    );
  }

  return (
    <LayoutWithSidebar>
      <Box>
        <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ mb: 3 }}>
          <Box sx={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: 2,
            p: 2,
            borderRadius: 2,
            backgroundColor: 'white',
            border: '1px solid #e5e7eb',
            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
          }}>
            <Box sx={{
              width: 40,
              height: 40,
              borderRadius: '8px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              backgroundColor: '#f8fafc',
              border: '1px solid #e2e8f0'
            }}>
              <Event sx={{ fontSize: 20, color: '#64748b' }} />
            </Box>
            <Typography variant="h6" sx={{ 
              fontWeight: 500,
              color: '#1e293b',
              fontSize: '1.1rem'
            }}>
              {isWorker 
                ? 'My Appointments' 
                : 'Appointment Management'
              }
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', gap: 2 }}>
            <Button
              variant="outlined"
              startIcon={<Download />}
              onClick={downloadAppointmentsAsExcel}
              sx={{ 
                borderRadius: 2,
                px: 2,
                py: 1,
                borderColor: '#d1d5db',
                color: '#374151',
                textTransform: 'none',
                fontWeight: 500,
                fontSize: '14px',
                backgroundColor: 'white',
                '&:hover': {
                  backgroundColor: '#f9fafb',
                  borderColor: '#9ca3af',
                }
              }}
            >
              Export
            </Button>
            {!isWorker && (
              <Button
                variant="contained"
                startIcon={<Add />}
                onClick={openCreateDialog}
                sx={{ 
                  borderRadius: 2,
                  px: 2,
                  py: 1,
                  backgroundColor: '#374151',
                  textTransform: 'none',
                  fontWeight: 500,
                  fontSize: '14px',
                  '&:hover': {
                    backgroundColor: '#1f2937',
                  }
                }}
              >
                New Appointment
              </Button>
            )}
          </Box>
        </Box>

        {authError && (
          <Alert severity="warning" sx={{ mb: 3, borderRadius: 2 }}>
            ⚠️ {authError}
          </Alert>
        )}

        {error && (
          <Alert severity="error" sx={{ mb: 3, borderRadius: 2 }}>
            {error}
          </Alert>
        )}

        {successMessage && (
          <Alert 
            severity="success" 
            sx={{ 
              mb: 3, 
              borderRadius: 2,
              backgroundColor: '#f0fdf4',
              border: '1px solid #bbf7d0',
              '& .MuiAlert-icon': {
                color: '#16a34a'
              }
            }}
            onClose={() => setSuccessMessage('')}
          >
            {successMessage}
          </Alert>
        )}

        {/* Overview Section */}
        <Box sx={{ mb: 4 }}>
          <Typography variant="h5" component="h1" sx={{ 
            fontWeight: 500,
            color: '#374151',
            mb: 3,
            fontSize: '1.5rem'
          }}>
            Overview
          </Typography>
          
          {/* Dashboard Cards */}
          <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>
            {/* Today's Appointments Card */}
            <Card sx={{ 
              minWidth: 200, 
              flex: 1, 
              borderRadius: 2,
              border: '1px solid #e5e7eb',
              backgroundColor: 'white',
              boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
              '&:hover': {
                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
              },
              transition: 'box-shadow 0.2s ease'
            }}>
              <CardContent sx={{ p: 2 }}>
                <Box display="flex" alignItems="center" justifyContent="space-between">
                  <Box sx={{ flex: 1 }}>
                    <Typography variant="body2" sx={{ color: '#6b7280', fontSize: '12px', mb: 1 }}>
                      {isWorker ? "PENDING" : "TODAY'S"}
                    </Typography>
                    <Typography variant="h4" sx={{ fontWeight: 600, color: '#374151', mb: 0.5 }}>
                      {isWorker 
                        ? appointmentStats.scheduled
                        : appointmentStats.today
                      }
                    </Typography>
                    <Typography variant="body2" sx={{ color: '#9ca3af', fontSize: '12px' }}>
                      appointments
                    </Typography>
                  </Box>
                  <Box sx={{ 
                    width: 40, 
                    height: 40, 
                    borderRadius: '8px',
                    backgroundColor: '#f3f4f6',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <Schedule sx={{ fontSize: 20, color: '#6b7280' }} />
                  </Box>
                </Box>
              </CardContent>
            </Card>

            {/* Upcoming Appointments Card */}
            <Card sx={{ 
              minWidth: 200, 
              flex: 1, 
              borderRadius: 2,
              border: '1px solid #e5e7eb',
              backgroundColor: 'white',
              boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
              '&:hover': {
                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
              },
              transition: 'box-shadow 0.2s ease'
            }}>
              <CardContent sx={{ p: 2 }}>
                <Box display="flex" alignItems="center" justifyContent="space-between">
                  <Box sx={{ flex: 1 }}>
                    <Typography variant="body2" sx={{ color: '#6b7280', fontSize: '12px', mb: 1 }}>
                      {isWorker ? "CONFIRMED" : "UPCOMING"}
                    </Typography>
                    <Typography variant="h4" sx={{ fontWeight: 600, color: '#374151', mb: 0.5 }}>
                      {isWorker 
                        ? appointmentStats.confirmed
                        : appointmentStats.upcoming
                      }
                    </Typography>
                    <Typography variant="body2" sx={{ color: '#9ca3af', fontSize: '12px' }}>
                      {isWorker ? "confirmed" : "this week"}
                    </Typography>
                  </Box>
                  <Box sx={{ 
                    width: 40, 
                    height: 40, 
                    borderRadius: '8px',
                    backgroundColor: '#f0fdf4',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <Event sx={{ fontSize: 20, color: '#16a34a' }} />
                  </Box>
                </Box>
              </CardContent>
            </Card>

            {/* Completed Appointments Card */}
            <Card sx={{ 
              minWidth: 200, 
              flex: 1, 
              borderRadius: 2,
              border: '1px solid #e5e7eb',
              backgroundColor: 'white',
              boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
              '&:hover': {
                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
              },
              transition: 'box-shadow 0.2s ease'
            }}>
              <CardContent sx={{ p: 2 }}>
                <Box display="flex" alignItems="center" justifyContent="space-between">
                  <Box sx={{ flex: 1 }}>
                    <Typography variant="body2" sx={{ color: '#6b7280', fontSize: '12px', mb: 1 }}>
                      COMPLETED
                    </Typography>
                    <Typography variant="h4" sx={{ fontWeight: 600, color: '#374151', mb: 0.5 }}>
                      {appointmentStats.completed}
                    </Typography>
                    <Typography variant="body2" sx={{ color: '#9ca3af', fontSize: '12px' }}>
                      this month
                    </Typography>
                  </Box>
                  <Box sx={{ 
                    width: 40, 
                    height: 40, 
                    borderRadius: '8px',
                    backgroundColor: '#fef3c7',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <CheckCircle sx={{ fontSize: 20, color: '#d97706' }} />
                  </Box>
                </Box>
              </CardContent>
            </Card>

            {/* Cancelled Appointments Card */}
            <Card sx={{ 
              minWidth: 200, 
              flex: 1, 
              borderRadius: 2,
              border: '1px solid #e5e7eb',
              backgroundColor: 'white',
              boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
              '&:hover': {
                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
              },
              transition: 'box-shadow 0.2s ease'
            }}>
              <CardContent sx={{ p: 2 }}>
                <Box display="flex" alignItems="center" justifyContent="space-between">
                  <Box sx={{ flex: 1 }}>
                    <Typography variant="body2" sx={{ color: '#6b7280', fontSize: '12px', mb: 1 }}>
                      CANCELLED
                    </Typography>
                    <Typography variant="h4" sx={{ fontWeight: 600, color: '#374151', mb: 0.5 }}>
                      {appointmentStats.cancelled}
                    </Typography>
                    <Typography variant="body2" sx={{ color: '#9ca3af', fontSize: '12px' }}>
                      this month
                    </Typography>
                  </Box>
                  <Box sx={{ 
                    width: 40, 
                    height: 40, 
                    borderRadius: '8px',
                    backgroundColor: '#fef2f2',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <Cancel sx={{ fontSize: 20, color: '#dc2626' }} />
                  </Box>
                </Box>
              </CardContent>
            </Card>
          </Box>
        </Box>

        {/* Professional Tabs */}
        <Card sx={{ 
          borderRadius: 2, 
          border: '1px solid #e5e7eb',
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
          overflow: 'hidden'
        }}>
          <Box sx={{ 
            backgroundColor: '#f9fafb',
            borderBottom: '1px solid #e5e7eb'
          }}>
            <Box sx={{ 
              display: 'flex', 
              flexWrap: { xs: 'wrap', sm: 'nowrap' },
              overflow: { xs: 'auto', sm: 'visible' }
            }}>
              {isWorker ? (
                <>
                  <Box
                    sx={{
                      flex: { xs: '1 1 50%', sm: 1 },
                      minWidth: { xs: '120px', sm: 'auto' },
                      py: 2,
                      px: 3,
                      cursor: 'pointer',
                      backgroundColor: tabValue === 0 ? 'white' : 'transparent',
                      borderBottom: tabValue === 0 ? '2px solid #374151' : '2px solid transparent',
                      color: tabValue === 0 ? '#374151' : '#6b7280',
                      transition: 'all 0.2s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: 1,
                      fontWeight: 500,
                      fontSize: '14px',
                      '&:hover': {
                        backgroundColor: tabValue === 0 ? 'white' : '#f3f4f6',
                        color: tabValue === 0 ? '#374151' : '#374151',
                      }
                    }}
                    onClick={() => {
                      console.log('Custom tab clicked: Pending');
                      setTabValue(0);
                      setActiveTab(0);
                    }}
                  >
                    <Schedule sx={{ fontSize: 16 }} />
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      Pending ({appointmentStats.scheduled})
                    </Typography>
                  </Box>
                  <Box
                    sx={{
                      flex: { xs: '1 1 50%', sm: 1 },
                      minWidth: { xs: '120px', sm: 'auto' },
                      py: 2,
                      px: 3,
                      cursor: 'pointer',
                      backgroundColor: tabValue === 1 ? 'white' : 'transparent',
                      borderBottom: tabValue === 1 ? '2px solid #0073e6' : '2px solid transparent',
                      color: tabValue === 1 ? '#0073e6' : '#6b7280',
                      transition: 'all 0.2s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: 1,
                      fontWeight: 500,
                      fontSize: '14px',
                      '&:hover': {
                        backgroundColor: tabValue === 1 ? 'white' : '#f1f5f9',
                        color: tabValue === 1 ? '#0073e6' : '#374151',
                      }
                    }}
                    onClick={() => {
                      console.log('Custom tab clicked: Confirmed');
                      setTabValue(1);
                      setActiveTab(1);
                    }}
                  >
                    <CheckCircle sx={{ fontSize: 16 }} />
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      Confirmed ({appointmentStats.confirmed})
                    </Typography>
                  </Box>
                  <Box
                    sx={{
                      flex: { xs: '1 1 50%', sm: 1 },
                      minWidth: { xs: '120px', sm: 'auto' },
                      py: 2,
                      px: 3,
                      cursor: 'pointer',
                      backgroundColor: tabValue === 2 ? 'white' : 'transparent',
                      borderBottom: tabValue === 2 ? '2px solid #0073e6' : '2px solid transparent',
                      color: tabValue === 2 ? '#0073e6' : '#6b7280',
                      transition: 'all 0.2s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: 1,
                      fontWeight: 500,
                      fontSize: '14px',
                      '&:hover': {
                        backgroundColor: tabValue === 2 ? 'white' : '#f1f5f9',
                        color: tabValue === 2 ? '#0073e6' : '#374151',
                      }
                    }}
                    onClick={() => {
                      console.log('Custom tab clicked: Completed');
                      setTabValue(2);
                      setActiveTab(2);
                    }}
                  >
                    <CheckCircle sx={{ fontSize: 16 }} />
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      Completed ({appointmentStats.completed})
                    </Typography>
                  </Box>
                  <Box
                    sx={{
                      flex: { xs: '1 1 50%', sm: 1 },
                      minWidth: { xs: '120px', sm: 'auto' },
                      py: 2,
                      px: 3,
                      cursor: 'pointer',
                      backgroundColor: tabValue === 3 ? 'white' : 'transparent',
                      borderBottom: tabValue === 3 ? '2px solid #0073e6' : '2px solid transparent',
                      color: tabValue === 3 ? '#0073e6' : '#6b7280',
                      transition: 'all 0.2s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: 1,
                      fontWeight: 500,
                      fontSize: '14px',
                      '&:hover': {
                        backgroundColor: tabValue === 3 ? 'white' : '#f1f5f9',
                        color: tabValue === 3 ? '#0073e6' : '#374151',
                      }
                    }}
                    onClick={() => {
                      console.log('Custom tab clicked: All');
                      setTabValue(3);
                      setActiveTab(3);
                    }}
                  >
                    <CalendarToday sx={{ fontSize: 16 }} />
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      All Appointments ({appointments.length})
                    </Typography>
                  </Box>
                </>
              ) : (
                <>
                  <Box
                    sx={{
                      flex: { xs: '1 1 50%', sm: 1 },
                      minWidth: { xs: '120px', sm: 'auto' },
                      py: 2,
                      px: 3,
                      cursor: 'pointer',
                      backgroundColor: activeTab === 0 ? 'white' : 'transparent',
                      borderBottom: activeTab === 0 ? '2px solid #0073e6' : '2px solid transparent',
                      color: activeTab === 0 ? '#0073e6' : '#6b7280',
                      transition: 'all 0.2s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: 1,
                      fontWeight: 500,
                      fontSize: '14px',
                      '&:hover': {
                        backgroundColor: activeTab === 0 ? 'white' : '#f1f5f9',
                        color: activeTab === 0 ? '#0073e6' : '#374151',
                      }
                    }}
                    onClick={() => setActiveTab(0)}
                  >
                    <CalendarToday sx={{ fontSize: 16 }} />
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      Today's Scheduled ({organizedAppointments.today.length})
                    </Typography>
                  </Box>
                  <Box
                    sx={{
                      flex: { xs: '1 1 50%', sm: 1 },
                      minWidth: { xs: '120px', sm: 'auto' },
                      py: 2,
                      px: 3,
                      cursor: 'pointer',
                      backgroundColor: activeTab === 1 ? 'white' : 'transparent',
                      borderBottom: activeTab === 1 ? '2px solid #0073e6' : '2px solid transparent',
                      color: activeTab === 1 ? '#0073e6' : '#6b7280',
                      transition: 'all 0.2s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: 1,
                      fontWeight: 500,
                      fontSize: '14px',
                      '&:hover': {
                        backgroundColor: activeTab === 1 ? 'white' : '#f1f5f9',
                        color: activeTab === 1 ? '#0073e6' : '#374151',
                      }
                    }}
                    onClick={() => setActiveTab(1)}
                  >
                    <CheckCircle sx={{ fontSize: 16 }} />
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      All Confirmed ({appointmentStats.confirmed})
                    </Typography>
                  </Box>
                  <Box
                    sx={{
                      flex: { xs: '1 1 50%', sm: 1 },
                      minWidth: { xs: '120px', sm: 'auto' },
                      py: 2,
                      px: 3,
                      cursor: 'pointer',
                      backgroundColor: activeTab === 2 ? 'white' : 'transparent',
                      borderBottom: activeTab === 2 ? '2px solid #0073e6' : '2px solid transparent',
                      color: activeTab === 2 ? '#0073e6' : '#6b7280',
                      transition: 'all 0.2s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: 1,
                      fontWeight: 500,
                      fontSize: '14px',
                      '&:hover': {
                        backgroundColor: activeTab === 2 ? 'white' : '#f1f5f9',
                        color: activeTab === 2 ? '#0073e6' : '#374151',
                      }
                    }}
                    onClick={() => setActiveTab(2)}
                  >
                    <Schedule sx={{ fontSize: 16 }} />
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      This Week ({organizedAppointments.thisWeek.length})
                    </Typography>
                  </Box>
                  <Box
                    sx={{
                      flex: { xs: '1 1 50%', sm: 1 },
                      minWidth: { xs: '120px', sm: 'auto' },
                      py: 2,
                      px: 3,
                      cursor: 'pointer',
                      backgroundColor: activeTab === 3 ? 'white' : 'transparent',
                      borderBottom: activeTab === 3 ? '2px solid #0073e6' : '2px solid transparent',
                      color: activeTab === 3 ? '#0073e6' : '#6b7280',
                      transition: 'all 0.2s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: 1,
                      fontWeight: 500,
                      fontSize: '14px',
                      '&:hover': {
                        backgroundColor: activeTab === 3 ? 'white' : '#f1f5f9',
                        color: activeTab === 3 ? '#0073e6' : '#374151',
                      }
                    }}
                    onClick={() => setActiveTab(3)}
                  >
                    <Assessment sx={{ fontSize: 16 }} />
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      Upcoming ({organizedAppointments.upcoming.length})
                    </Typography>
                  </Box>
                </>
              )}
            </Box>
          </Box>

          {/* Summary Stats - Only for non-workers */}
          {!isWorker && (
            <Box sx={{ 
              mb: 2, 
              display: 'flex', 
              gap: 1, 
              alignItems: 'center', 
              flexWrap: 'wrap',
              justifyContent: { xs: 'center', sm: 'flex-start' }
            }}>
              <Chip 
                label={`Confirmed: ${appointmentStats.confirmed}`} 
                color="success" 
                size="small" 
                sx={{ fontSize: { xs: '0.75rem', sm: '0.8125rem' } }}
              />
              <Chip 
                label={`Pending: ${appointmentStats.scheduled}`} 
                color="warning" 
                size="small" 
                sx={{ fontSize: { xs: '0.75rem', sm: '0.8125rem' } }}
              />
              <Chip 
                label={`Declined: ${appointmentStats.cancelled}`} 
                color="error" 
                size="small" 
                sx={{ fontSize: { xs: '0.75rem', sm: '0.8125rem' } }}
              />
            </Box>
          )}

          {isWorker ? (
            <>
              <TabPanel value={activeTab} index={0}>
                <AppointmentTable 
                  appointments={appointments.filter(apt => apt.status === 'scheduled')} 
                  onEdit={openEditDialog}
                  onViewDetails={openViewDetailsDialog}
                  onStatusUpdate={handleStatusUpdate}
                  onConfirm={handleConfirmAppointment}
                  onDecline={handleDeclineAppointment}
                  onDelete={handleDeleteAppointment}
                  getStatusColor={getStatusColor}
                  getStatusIcon={getStatusIcon}
                  getLocationIcon={getLocationIcon}
                  formatDate={formatDate}
                  formatTime={formatTime}
                  copyToClipboard={copyToClipboard}
                  isWorker={true}
                />
              </TabPanel>

              <TabPanel value={activeTab} index={1}>
                <AppointmentTable 
                  appointments={appointments.filter(apt => apt.status === 'confirmed')} 
                  onEdit={openEditDialog}
                  onViewDetails={openViewDetailsDialog}
                  onStatusUpdate={handleStatusUpdate}
                  onConfirm={handleConfirmAppointment}
                  onDecline={handleDeclineAppointment}
                  onDelete={handleDeleteAppointment}
                  getStatusColor={getStatusColor}
                  getStatusIcon={getStatusIcon}
                  getLocationIcon={getLocationIcon}
                  formatDate={formatDate}
                  formatTime={formatTime}
                  copyToClipboard={copyToClipboard}
                  isWorker={true}
                />
              </TabPanel>

              <TabPanel value={activeTab} index={2}>
                <AppointmentTable 
                  appointments={appointments.filter(apt => apt.status === 'completed')} 
                  onEdit={openEditDialog}
                  onViewDetails={openViewDetailsDialog}
                  onStatusUpdate={handleStatusUpdate}
                  onConfirm={handleConfirmAppointment}
                  onDecline={handleDeclineAppointment}
                  onDelete={handleDeleteAppointment}
                  getStatusColor={getStatusColor}
                  getStatusIcon={getStatusIcon}
                  getLocationIcon={getLocationIcon}
                  formatDate={formatDate}
                  formatTime={formatTime}
                  copyToClipboard={copyToClipboard}
                  isWorker={true}
                />
              </TabPanel>

              <TabPanel value={activeTab} index={3}>
                <AppointmentTable 
                  appointments={appointments} 
                  onEdit={openEditDialog}
                  onViewDetails={openViewDetailsDialog}
                  onStatusUpdate={handleStatusUpdate}
                  onConfirm={handleConfirmAppointment}
                  onDecline={handleDeclineAppointment}
                  onDelete={handleDeleteAppointment}
                  getStatusColor={getStatusColor}
                  getStatusIcon={getStatusIcon}
                  getLocationIcon={getLocationIcon}
                  formatDate={formatDate}
                  formatTime={formatTime}
                  copyToClipboard={copyToClipboard}
                  isWorker={true}
                />
              </TabPanel>
            </>
          ) : (
            <>
              <TabPanel value={activeTab} index={0}>
                <AppointmentTable 
                  appointments={organizedAppointments.today} 
                  onEdit={openEditDialog}
                  onViewDetails={openViewDetailsDialog}
                  onStatusUpdate={handleStatusUpdate}
                  onConfirm={handleConfirmAppointment}
                  onDecline={handleDeclineAppointment}
                  onDelete={handleDeleteAppointment}
                  getStatusColor={getStatusColor}
                  getStatusIcon={getStatusIcon}
                  getLocationIcon={getLocationIcon}
                  formatDate={formatDate}
                  formatTime={formatTime}
                  copyToClipboard={copyToClipboard}
                  isWorker={false}
                />
              </TabPanel>

              <TabPanel value={activeTab} index={1}>
                <AppointmentTable 
                  appointments={appointments.filter(apt => apt.status === 'confirmed')} 
                  onEdit={openEditDialog}
                  onViewDetails={openViewDetailsDialog}
                  onStatusUpdate={handleStatusUpdate}
                  onConfirm={handleConfirmAppointment}
                  onDecline={handleDeclineAppointment}
                  onDelete={handleDeleteAppointment}
                  getStatusColor={getStatusColor}
                  getStatusIcon={getStatusIcon}
                  getLocationIcon={getLocationIcon}
                  formatDate={formatDate}
                  formatTime={formatTime}
                  copyToClipboard={copyToClipboard}
                  isWorker={false}
                />
              </TabPanel>

              <TabPanel value={activeTab} index={2}>
                <AppointmentTable 
                  appointments={organizedAppointments.thisWeek} 
                  onEdit={openEditDialog}
                  onViewDetails={openViewDetailsDialog}
                  onStatusUpdate={handleStatusUpdate}
                  onConfirm={handleConfirmAppointment}
                  onDecline={handleDeclineAppointment}
                  onDelete={handleDeleteAppointment}
                  getStatusColor={getStatusColor}
                  getStatusIcon={getStatusIcon}
                  getLocationIcon={getLocationIcon}
                  formatDate={formatDate}
                  formatTime={formatTime}
                  copyToClipboard={copyToClipboard}
                  isWorker={false}
                />
              </TabPanel>

              <TabPanel value={activeTab} index={3}>
                <AppointmentTable 
                  appointments={organizedAppointments.upcoming} 
                  onEdit={openEditDialog}
                  onViewDetails={openViewDetailsDialog}
                  onStatusUpdate={handleStatusUpdate}
                  onConfirm={handleConfirmAppointment}
                  onDecline={handleDeclineAppointment}
                  onDelete={handleDeleteAppointment}
                  getStatusColor={getStatusColor}
                  getStatusIcon={getStatusIcon}
                  getLocationIcon={getLocationIcon}
                  formatDate={formatDate}
                  formatTime={formatTime}
                  copyToClipboard={copyToClipboard}
                  isWorker={false}
                />
              </TabPanel>

            </>
          )}
        </Card>

        {/* Automatic Pagination - Hidden UI */}
        {/* Pagination is handled automatically in the background */}

        {/* Create/Edit Dialog - Only for non-workers */}
        {!isWorker && (
          <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="md" fullWidth>
          <DialogTitle>
            {selectedAppointment ? 'Edit Appointment' : 'Create New Appointment'}
          </DialogTitle>
          <DialogContent>
            <Box sx={{ mt: 2 }}>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>
                <Box sx={{ flex: '1 1 300px', minWidth: '300px' }}>
                  <FormControl fullWidth>
                    <InputLabel>Case</InputLabel>
                    <Select
                      value={formData.case}
                      onChange={(e) => {
                        const selectedCase = cases.find(c => c._id === e.target.value);
                        setFormData({ 
                          ...formData, 
                          case: e.target.value,
                          worker: selectedCase?.worker?._id || ''
                        });
                      }}
                      disabled={!!selectedAppointment}
                    >
                      {cases.map((caseItem) => (
                        <MenuItem key={caseItem._id} value={caseItem._id}>
                          {caseItem.caseNumber} - {caseItem.worker?.firstName} {caseItem.worker?.lastName}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Box>

                <Box sx={{ flex: '1 1 300px', minWidth: '300px' }}>
                  <TextField
                    fullWidth
                    label="Worker"
                    value={formData.case ? (() => {
                      const selectedCase = cases.find(c => c._id === formData.case);
                      return selectedCase ? `${selectedCase.worker?.firstName} ${selectedCase.worker?.lastName}` : '';
                    })() : ''}
                    InputProps={{
                      readOnly: true,
                    }}
                  />
                </Box>

                <Box sx={{ flex: '1 1 300px', minWidth: '300px' }}>
                  <FormControl fullWidth>
                    <InputLabel>Appointment Type</InputLabel>
                    <Select
                      value={formData.appointmentType}
                      onChange={(e) => setFormData({ ...formData, appointmentType: e.target.value })}
                    >
                      <MenuItem value="assessment">Assessment</MenuItem>
                      <MenuItem value="treatment">Treatment</MenuItem>
                      <MenuItem value="follow_up">Follow-up</MenuItem>
                      <MenuItem value="consultation">Consultation</MenuItem>
                      <MenuItem value="telehealth">Telehealth</MenuItem>
                    </Select>
                  </FormControl>
                </Box>

                <Box sx={{ flex: '1 1 300px', minWidth: '300px' }}>
                  <TextField
                    fullWidth
                    label="Scheduled Date & Time"
                    type="datetime-local"
                    value={formData.scheduledDate}
                    onChange={(e) => setFormData({ ...formData, scheduledDate: e.target.value })}
                    InputLabelProps={{ shrink: true }}
                    inputProps={{
                      min: new Date().toISOString().slice(0, 16)
                    }}
                  />
                </Box>

                <Box sx={{ flex: '1 1 300px', minWidth: '300px' }}>
                  <TextField
                    fullWidth
                    label="Duration (minutes)"
                    type="number"
                    value={formData.duration}
                    onChange={(e) => setFormData({ ...formData, duration: parseInt(e.target.value) || 60 })}
                    inputProps={{ min: 15, max: 480 }}
                  />
                </Box>

                <Box sx={{ flex: '1 1 300px', minWidth: '300px' }}>
                  <FormControl fullWidth>
                    <InputLabel>Location</InputLabel>
                    <Select
                      value={formData.location}
                      onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                    >
                      <MenuItem value="clinic">Clinic</MenuItem>
                      <MenuItem value="telehealth">Telehealth</MenuItem>
                      <MenuItem value="workplace">Workplace</MenuItem>
                      <MenuItem value="home">Home</MenuItem>
                    </Select>
                  </FormControl>
                </Box>

                <Box sx={{ flex: '1 1 100%', minWidth: '100%' }}>
                  <TextField
                    fullWidth
                    label="Purpose"
                    multiline
                    rows={2}
                    value={formData.purpose}
                    onChange={(e) => setFormData({ ...formData, purpose: e.target.value })}
                  />
                </Box>

                <Box sx={{ flex: '1 1 100%', minWidth: '100%' }}>
                  <TextField
                    fullWidth
                    label="Notes"
                    multiline
                    rows={3}
                    value={formData.notes}
                    onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                  />
                </Box>
              </Box>
            </Box>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDialogOpen(false)}>Cancel</Button>
            <Button 
              variant="contained" 
              onClick={selectedAppointment ? handleUpdateAppointment : handleCreateAppointment}
              disabled={isCreating || isUpdating || !formData.case || !formData.worker || !formData.scheduledDate}
            >
              {isCreating ? 'Creating...' : isUpdating ? 'Updating...' : selectedAppointment ? 'Update' : 'Create'}
            </Button>
          </DialogActions>
        </Dialog>
        )}

        {/* View Details Dialog */}
        <Dialog 
          open={viewDetailsOpen} 
          onClose={() => setViewDetailsOpen(false)} 
          maxWidth="md" 
          fullWidth
          PaperProps={{
            sx: {
              borderRadius: 2,
              boxShadow: '0 8px 32px rgba(0,0,0,0.12)'
            }
          }}
        >
          <DialogTitle sx={{ 
            pb: 1,
            background: 'linear-gradient(135deg, #7B68EE 0%, #20B2AA 100%)',
            color: 'white',
            display: 'flex',
            alignItems: 'center',
            gap: 2
          }}>
            <Box sx={{
              width: 40,
              height: 40,
              borderRadius: '10px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              background: 'rgba(255, 255, 255, 0.2)',
              backdropFilter: 'blur(10px)'
            }}>
              <Event sx={{ fontSize: 24 }} />
            </Box>
            <Box>
              <Typography variant="h6" sx={{ fontWeight: 600, mb: 0.5 }}>
                Appointment Details
              </Typography>
              <Typography variant="body2" sx={{ opacity: 0.9 }}>
                {selectedAppointment?.appointmentType?.replace('_', ' ').toUpperCase()} APPOINTMENT
              </Typography>
            </Box>
          </DialogTitle>
          
          <DialogContent sx={{ p: 3 }}>
            {selectedAppointment && (
              <Box>
                {/* Status and Basic Info */}
                <Box sx={{ mb: 3 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                    <Chip
                      icon={getStatusIcon(selectedAppointment.status)}
                      label={selectedAppointment.status.replace('_', ' ').toUpperCase()}
                      color={getStatusColor(selectedAppointment.status)}
                      sx={{ fontWeight: 600 }}
                    />
                    <Chip
                      label={selectedAppointment.appointmentType.replace('_', ' ').toUpperCase()}
                      variant="outlined"
                      sx={{ fontWeight: 500 }}
                    />
                  </Box>
                  
                  <Box sx={{ 
                    p: 2, 
                    backgroundColor: '#f8f9fa', 
                    borderRadius: 2,
                    border: '1px solid #e9ecef'
                  }}>
                    <Typography variant="h6" sx={{ mb: 2, color: '#1a1a1a', fontWeight: 600 }}>
                      📅 Schedule Information
                    </Typography>
                    <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, gap: 2 }}>
                      <Box>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                          Date & Time
                        </Typography>
                        <Typography variant="body1" sx={{ fontWeight: 500 }}>
                          {formatDate(selectedAppointment.scheduledDate)} at {formatTime(selectedAppointment.scheduledDate)}
                        </Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                          Duration
                        </Typography>
                        <Typography variant="body1" sx={{ fontWeight: 500 }}>
                          {selectedAppointment.duration} minutes
                        </Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                          Location
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          {getLocationIcon(selectedAppointment.location)}
                          <Typography variant="body1" sx={{ fontWeight: 500 }}>
                          {(selectedAppointment.location?.charAt?.(0) || '').toUpperCase() + (selectedAppointment.location?.slice?.(1) || selectedAppointment.location || '')}
                          </Typography>
                        </Box>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                          Created
                        </Typography>
                        <Typography variant="body1" sx={{ fontWeight: 500 }}>
                          {formatDate(selectedAppointment.createdAt)}
                        </Typography>
                      </Box>
                    </Box>
                  </Box>
                </Box>

                {/* Patient/Worker Information */}
                <Box sx={{ mb: 3 }}>
                  <Box sx={{ 
                    p: 2, 
                    backgroundColor: '#f0f9ff', 
                    borderRadius: 2,
                    border: '1px solid #bae6fd'
                  }}>
                    <Typography variant="h6" sx={{ mb: 2, color: '#1a1a1a', fontWeight: 600 }}>
                      👤 Patient Information
                    </Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                      <Avatar sx={{ width: 48, height: 48, fontSize: '1.2rem' }}>
                        {((selectedAppointment.worker?.firstName || selectedAppointment.case?.worker?.firstName || '?') as string).charAt(0)}
                        {((selectedAppointment.worker?.lastName || selectedAppointment.case?.worker?.lastName || '') as string).charAt(0)}
                      </Avatar>
                      <Box>
                        <Typography variant="h6" sx={{ fontWeight: 600 }}>
                          {selectedAppointment.worker?.firstName || selectedAppointment.case?.worker?.firstName || 'Unknown'} {selectedAppointment.worker?.lastName || selectedAppointment.case?.worker?.lastName || ''}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Case: {selectedAppointment.case?.caseNumber || 'N/A'}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Email: {selectedAppointment.worker?.email || selectedAppointment.case?.worker?.email || 'N/A'}
                        </Typography>
                      </Box>
                    </Box>
                  </Box>
                </Box>

                {/* Clinician Information */}
                <Box sx={{ mb: 3 }}>
                  <Box sx={{ 
                    p: 2, 
                    backgroundColor: '#f0fdf4', 
                    borderRadius: 2,
                    border: '1px solid #bbf7d0'
                  }}>
                    <Typography variant="h6" sx={{ mb: 2, color: '#1a1a1a', fontWeight: 600 }}>
                      🩺 Clinician Information
                    </Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                      <Avatar sx={{ width: 48, height: 48, fontSize: '1.2rem' }}>
                        {(selectedAppointment.clinician?.firstName || '?')?.charAt(0)}{(selectedAppointment.clinician?.lastName || '')?.charAt(0)}
                      </Avatar>
                      <Box>
                        <Typography variant="h6" sx={{ fontWeight: 600 }}>
                          {selectedAppointment.clinician?.firstName} {selectedAppointment.clinician?.lastName}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Email: {selectedAppointment.clinician?.email || 'N/A'}
                        </Typography>
                      </Box>
                    </Box>
                  </Box>
                </Box>

                {/* Purpose and Notes */}
                {(selectedAppointment.purpose || selectedAppointment.notes) && (
                  <Box sx={{ mb: 3 }}>
                    <Box sx={{ 
                      p: 2, 
                      backgroundColor: '#fefce8', 
                      borderRadius: 2,
                      border: '1px solid #fde047'
                    }}>
                      <Typography variant="h6" sx={{ mb: 2, color: '#1a1a1a', fontWeight: 600 }}>
                        📝 Appointment Details
                      </Typography>
                      {selectedAppointment.purpose && (
                        <Box sx={{ mb: 2 }}>
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                            Purpose
                          </Typography>
                          <Typography variant="body1" sx={{ fontWeight: 500 }}>
                            {selectedAppointment.purpose}
                          </Typography>
                        </Box>
                      )}
                      {selectedAppointment.notes && (
                        <Box>
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                            Notes
                          </Typography>
                          <Typography variant="body1" sx={{ fontWeight: 500 }}>
                            {selectedAppointment.notes}
                          </Typography>
                        </Box>
                      )}
                    </Box>
                  </Box>
                )}

                {/* Telehealth Information */}
                {selectedAppointment.location === 'telehealth' && selectedAppointment.telehealthInfo && (
                  <Box sx={{ mb: 3 }}>
                    <Box sx={{ 
                      p: 2, 
                      backgroundColor: '#f0f4ff', 
                      borderRadius: 2,
                      border: '1px solid #c7d2fe'
                    }}>
                      <Typography variant="h6" sx={{ mb: 2, color: '#1a1a1a', fontWeight: 600 }}>
                        💻 Telehealth Information
                      </Typography>
                      
                      {selectedAppointment.telehealthInfo.zoomMeeting && (
                        <Box>
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                            Zoom Meeting Details
                          </Typography>
                          <Box sx={{ 
                            p: 2, 
                            backgroundColor: 'white', 
                            borderRadius: 1,
                            border: '1px solid #e5e7eb'
                          }}>
                            <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, gap: 2, mb: 2 }}>
                              <Box>
                                <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                                  Meeting Topic
                                </Typography>
                                <Typography variant="body1" sx={{ fontWeight: 500 }}>
                                  {selectedAppointment.telehealthInfo.zoomMeeting.topic}
                                </Typography>
                              </Box>
                              <Box>
                                <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                                  Meeting ID
                                </Typography>
                                <Typography variant="body1" sx={{ fontWeight: 500, fontFamily: 'monospace' }}>
                                  {selectedAppointment.telehealthInfo.zoomMeeting.meetingId}
                                </Typography>
                              </Box>
                              <Box>
                                <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                                  Password
                                </Typography>
                                <Typography variant="body1" sx={{ fontWeight: 500, fontFamily: 'monospace' }}>
                                  {selectedAppointment.telehealthInfo.zoomMeeting.password}
                                </Typography>
                              </Box>
                              <Box>
                                <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                                  Status
                                </Typography>
                                <Chip 
                                  label={selectedAppointment.telehealthInfo.zoomMeeting.status.toUpperCase()}
                                  color={selectedAppointment.telehealthInfo.zoomMeeting.status === 'active' ? 'success' : 'default'}
                                  size="small"
                                />
                              </Box>
                            </Box>
                            
                            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                              <Button
                                variant="contained"
                                startIcon={<VideoCall />}
                                onClick={() => window.open(selectedAppointment.telehealthInfo!.zoomMeeting!.joinUrl, '_blank')}
                                sx={{ 
                                  backgroundColor: '#2D8CFF',
                                  '&:hover': { backgroundColor: '#1e6bb8' }
                                }}
                              >
                                Join Meeting
                              </Button>
                              <Button
                                variant="outlined"
                                startIcon={<ContentCopy />}
                                onClick={() => copyToClipboard(selectedAppointment.telehealthInfo!.zoomMeeting!.joinUrl)}
                              >
                                Copy Link
                              </Button>
                            </Box>
                          </Box>
                        </Box>
                      )}
                      
                      {selectedAppointment.telehealthInfo.instructions && (
                        <Box sx={{ mt: 2 }}>
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                            Instructions
                          </Typography>
                          <Typography variant="body1">
                            {selectedAppointment.telehealthInfo.instructions}
                          </Typography>
                        </Box>
                      )}
                    </Box>
                  </Box>
                )}

                {/* Timestamps */}
                <Box sx={{ 
                  p: 2, 
                  backgroundColor: '#f9fafb', 
                  borderRadius: 2,
                  border: '1px solid #e5e7eb'
                }}>
                  <Typography variant="h6" sx={{ mb: 2, color: '#1a1a1a', fontWeight: 600 }}>
                    ⏰ Timestamps
                  </Typography>
                  <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, gap: 2 }}>
                    <Box>
                      <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                        Created
                      </Typography>
                      <Typography variant="body1" sx={{ fontWeight: 500 }}>
                        {new Date(selectedAppointment.createdAt).toLocaleString()}
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                        Last Updated
                      </Typography>
                      <Typography variant="body1" sx={{ fontWeight: 500 }}>
                        {new Date(selectedAppointment.updatedAt).toLocaleString()}
                      </Typography>
                    </Box>
                  </Box>
                </Box>
              </Box>
            )}
          </DialogContent>
          
          <DialogActions sx={{ p: 3, pt: 1 }}>
            <Button 
              onClick={() => setViewDetailsOpen(false)}
              sx={{ 
                color: '#6b7280',
                '&:hover': { backgroundColor: '#f3f4f6' }
              }}
            >
              Close
            </Button>
            {selectedAppointment && !isWorker && (
              <>
                <Button 
                  variant="outlined"
                  startIcon={<Edit />}
                  onClick={() => {
                    setViewDetailsOpen(false);
                    openEditDialog(selectedAppointment);
                  }}
                  sx={{ 
                    borderColor: '#7B68EE',
                    color: '#7B68EE',
                    '&:hover': { 
                      borderColor: '#7B68EE',
                      backgroundColor: 'rgba(123, 104, 238, 0.04)'
                    }
                  }}
                >
                  Edit Appointment
                </Button>
                {selectedAppointment.location === 'telehealth' && selectedAppointment.telehealthInfo?.zoomMeeting && (
                  <Button 
                    variant="contained"
                    startIcon={<VideoCall />}
                    onClick={() => window.open(selectedAppointment!.telehealthInfo!.zoomMeeting!.joinUrl, '_blank')}
                    sx={{ 
                      backgroundColor: '#2D8CFF',
                      '&:hover': { backgroundColor: '#1e6bb8' }
                    }}
                  >
                    Start Meeting
                  </Button>
                )}
              </>
            )}
          </DialogActions>
        </Dialog>
        
        {/* Pagination Controls */}
        <Box sx={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center', 
          mt: 3,
          px: 2
        }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Typography variant="body2" color="text.secondary">
              Showing {((currentPage - 1) * pageSize) + 1} to {Math.min(currentPage * pageSize, totalAppointments)} of {totalAppointments} appointments
            </Typography>
            <FormControl size="small" sx={{ minWidth: 80 }}>
              <Select
                value={pageSize}
                onChange={handlePageSizeChange}
                displayEmpty
              >
                <MenuItem value={10}>10</MenuItem>
                <MenuItem value={15}>15</MenuItem>
                <MenuItem value={25}>25</MenuItem>
                <MenuItem value={50}>50</MenuItem>
              </Select>
            </FormControl>
            <Typography variant="body2" color="text.secondary">
              per page
            </Typography>
          </Box>
          
          <Pagination
            count={totalPages}
            page={currentPage}
            onChange={handlePageChange}
            color="primary"
            showFirstButton
            showLastButton
            size="large"
            sx={{
              '& .MuiPaginationItem-root': {
                color: '#6b7280',
                border: '1px solid #e5e7eb',
                backgroundColor: 'white',
                '&:hover': {
                  backgroundColor: '#f3f4f6',
                  borderColor: '#d1d5db'
                },
                '&.Mui-selected': {
                  backgroundColor: '#374151',
                  color: 'white',
                  borderColor: '#374151',
                  '&:hover': {
                    backgroundColor: '#1f2937'
                  }
                }
              }
            }}
          />
        </Box>
      </Box>
    </LayoutWithSidebar>
  );
});

Appointments.displayName = 'Appointments';

// Appointment Table Component
interface AppointmentTableProps {
  appointments: Appointment[];
  onEdit: (appointment: Appointment) => void;
  onViewDetails: (appointment: Appointment) => void;
  onStatusUpdate: (id: string, status: string) => void;
  onConfirm: (id: string) => void;
  onDecline: (id: string) => void;
  onDelete: (id: string) => void;
  getStatusColor: (status: string) => any;
  getStatusIcon: (status: string) => React.ReactElement;
  getLocationIcon: (location: string) => React.ReactNode;
  formatDate: (date: string) => string;
  formatTime: (date: string) => string;
  copyToClipboard: (text: string) => Promise<void>;
  isWorker: boolean;
}

const AppointmentTable: React.FC<AppointmentTableProps> = memo(({
  appointments,
  onEdit,
  onViewDetails,
  onStatusUpdate,
  onConfirm,
  onDecline,
  onDelete,
  getStatusColor,
  getStatusIcon,
  getLocationIcon,
  formatDate,
  formatTime,
  copyToClipboard,
  isWorker
}) => {
  if (appointments.length === 0) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="text.secondary">
          No appointments found
        </Typography>
      </Box>
    );
  }

  return (
    <Box>
      <TableContainer 
        component={Paper} 
        variant="outlined"
        sx={{ 
          overflowX: 'auto',
          borderRadius: 2,
          border: '1px solid #e5e7eb',
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
        }}
      >
      <Table>
        <TableHead>
          <TableRow sx={{ backgroundColor: '#f9fafb' }}>
            <TableCell sx={{ 
              minWidth: { xs: '120px', sm: 'auto' },
              fontWeight: 600,
              color: '#374151',
              fontSize: '14px',
              borderBottom: '1px solid #e5e7eb'
            }}>Date & Time</TableCell>
            {isWorker ? (
              <>
                <TableCell sx={{ 
                  minWidth: { xs: '100px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Clinician</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '80px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Type</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '80px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Location</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '60px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Duration</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '80px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Status</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '100px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Actions</TableCell>
              </>
            ) : (
              <>
                <TableCell sx={{ 
                  minWidth: { xs: '100px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Patient</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '80px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Type</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '80px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Location</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '60px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Duration</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '100px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Confirmation Status</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '80px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Status</TableCell>
                <TableCell sx={{ 
                  minWidth: { xs: '100px', sm: 'auto' },
                  fontWeight: 600,
                  color: '#374151',
                  fontSize: '14px',
                  borderBottom: '1px solid #e5e7eb'
                }}>Actions</TableCell>
              </>
            )}
          </TableRow>
        </TableHead>
        <TableBody>
          {appointments.map((appointment) => (
            <TableRow key={appointment._id}>
              <TableCell>
                <Box>
                  <Typography variant="body2" fontWeight={600}>
                    {formatDate(appointment.scheduledDate)}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    {formatTime(appointment.scheduledDate)}
                  </Typography>
                </Box>
              </TableCell>
              {isWorker ? (
                <TableCell>
                  <Box display="flex" alignItems="center" gap={1}>
                    {appointment.clinician ? (
                      <>
                        <Avatar sx={{ width: 32, height: 32, fontSize: '0.875rem' }}>
                          {(appointment.clinician?.firstName || '?')?.charAt(0)}{(appointment.clinician?.lastName || '')?.charAt(0)}
                        </Avatar>
                        <Box>
                          <Typography variant="body2">
                            {appointment.clinician.firstName} {appointment.clinician.lastName}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Case: {appointment.case?.caseNumber || 'N/A'}
                          </Typography>
                        </Box>
                      </>
                    ) : (
                      <Typography variant="body2" color="text.secondary">No clinician assigned</Typography>
                    )}
                  </Box>
                </TableCell>
              ) : (
                <TableCell>
                  <Box display="flex" alignItems="center" gap={1}>
                    {appointment.worker || (appointment.case && appointment.case.worker) ? (
                      <>
                        <Avatar sx={{ width: 32, height: 32, fontSize: '0.875rem' }}>
                          {((appointment.worker?.firstName || appointment.case?.worker?.firstName || '?') as string).charAt(0)}
                          {((appointment.worker?.lastName || appointment.case?.worker?.lastName || '') as string).charAt(0)}
                        </Avatar>
                        <Box>
                          <Typography variant="body2">
                            {appointment.worker?.firstName || appointment.case?.worker?.firstName || 'Unknown'} {appointment.worker?.lastName || appointment.case?.worker?.lastName || ''}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Case: {appointment.case?.caseNumber || 'N/A'}
                          </Typography>
                        </Box>
                      </>
                    ) : (
                      <Typography variant="body2" color="text.secondary">No worker assigned</Typography>
                    )}
                  </Box>
                </TableCell>
              )}
              <TableCell>
                <Chip
                  label={appointment.appointmentType.replace('_', ' ')}
                  size="small"
                  variant="outlined"
                />
              </TableCell>
              <TableCell>
                <Box display="flex" alignItems="center" gap={0.5}>
                  {getLocationIcon(appointment.location)}
                  <Typography variant="body2">
                    {appointment.location}
                  </Typography>
                  {appointment.location === 'telehealth' && appointment.telehealthInfo?.zoomMeeting && (
                    <Tooltip title="Zoom Meeting Available">
                      <VideoCall sx={{ fontSize: 16, color: '#2D8CFF', ml: 1 }} />
                    </Tooltip>
                  )}
                </Box>
              </TableCell>
              <TableCell>
                <Typography variant="body2">
                  {appointment.duration} min
                </Typography>
              </TableCell>
              {!isWorker && (
                <TableCell>
                  <Chip
                    icon={appointment.status === 'confirmed' ? <CheckCircle /> : appointment.status === 'cancelled' ? <Cancel /> : <Schedule />}
                    label={appointment.status === 'confirmed' ? 'Confirmed' : appointment.status === 'cancelled' ? 'Declined' : 'Pending'}
                    color={appointment.status === 'confirmed' ? 'success' : appointment.status === 'cancelled' ? 'error' : 'warning'}
                    size="small"
                  />
                </TableCell>
              )}
              <TableCell>
                <Chip
                  icon={getStatusIcon(appointment.status)}
                  label={appointment.status.replace('_', ' ')}
                  color={getStatusColor(appointment.status)}
                  size="small"
                />
              </TableCell>
              <TableCell>
                <Box display="flex" gap={0.5}>
                  {isWorker ? (
                    // Worker actions - simple confirm/decline + Zoom meeting
                    <>
                      {appointment.status === 'scheduled' && (
                        <>
                          <Tooltip title="Confirm Appointment">
                            <IconButton 
                              size="small" 
                              color="success"
                              onClick={() => onConfirm(appointment._id)}
                            >
                              <CheckCircle />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Decline Appointment">
                            <IconButton 
                              size="small" 
                              color="error"
                              onClick={() => onDecline(appointment._id)}
                            >
                              <Cancel />
                            </IconButton>
                          </Tooltip>
                        </>
                      )}
                      {appointment.status === 'confirmed' && (
                        <>
                          <Typography variant="caption" color="success.main" sx={{ mr: 1 }}>
                            Confirmed ✓
                          </Typography>
                          {appointment.location === 'telehealth' && appointment.telehealthInfo?.zoomMeeting && (
                            <>
                              <Tooltip title="Join Zoom Meeting">
                                <IconButton 
                                  size="small" 
                                  color="primary"
                                  onClick={() => {
                                    console.log('Worker joining Zoom meeting:', appointment.telehealthInfo?.zoomMeeting?.joinUrl);
                                    window.open(appointment.telehealthInfo!.zoomMeeting!.joinUrl, '_blank');
                                  }}
                                >
                                  <VideoCall />
                                </IconButton>
                              </Tooltip>
                              <Tooltip title="Copy Meeting Link">
                                <IconButton 
                                  size="small" 
                                  onClick={() => copyToClipboard(appointment.telehealthInfo!.zoomMeeting!.joinUrl)}
                                >
                                  <ContentCopy />
                                </IconButton>
                              </Tooltip>
                            </>
                          )}
                        </>
                      )}
                      {appointment.status === 'completed' && (
                        <Typography variant="caption" color="info.main">
                          Completed ✓
                        </Typography>
                      )}
                    </>
                  ) : (
                    // Clinician actions - full management + Zoom
                    <>
                      <Tooltip title="View Details">
                        <IconButton size="small" onClick={() => onViewDetails(appointment)}>
                          <Visibility />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Edit">
                        <IconButton size="small" onClick={() => onEdit(appointment)}>
                          <Edit />
                        </IconButton>
                      </Tooltip>
                      {appointment.location === 'telehealth' && appointment.telehealthInfo?.zoomMeeting && (
                        <Tooltip title="Start Zoom Meeting">
                          <IconButton 
                            size="small" 
                            color="primary"
                            onClick={() => {
                              console.log('Starting Zoom meeting:', appointment.telehealthInfo?.zoomMeeting?.joinUrl);
                              window.open(appointment.telehealthInfo!.zoomMeeting!.joinUrl, '_blank');
                            }}
                          >
                            <VideoCall />
                          </IconButton>
                        </Tooltip>
                      )}
                      {appointment.status === 'scheduled' && (
                        <Tooltip title="Confirm">
                          <IconButton 
                            size="small" 
                            onClick={() => onStatusUpdate(appointment._id, 'confirmed')}
                          >
                            <CheckCircle />
                          </IconButton>
                        </Tooltip>
                      )}
                      {appointment.status === 'confirmed' && (
                        <Tooltip title="Start">
                          <IconButton 
                            size="small" 
                            onClick={() => onStatusUpdate(appointment._id, 'in_progress')}
                          >
                            <PlayArrow />
                          </IconButton>
                        </Tooltip>
                      )}
                      {appointment.status === 'in_progress' && (
                        <Tooltip title="Complete">
                          <IconButton 
                            size="small" 
                            onClick={() => onStatusUpdate(appointment._id, 'completed')}
                          >
                            <CheckCircle />
                          </IconButton>
                        </Tooltip>
                      )}
                      <Tooltip title="Delete Appointment">
                        <IconButton 
                          size="small" 
                          color="error"
                          onClick={() => onDelete(appointment._id)}
                        >
                          <Delete />
                        </IconButton>
                      </Tooltip>
                    </>
                  )}
                </Box>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
    </Box>
  );
});

AppointmentTable.displayName = 'AppointmentTable';

export default Appointments;
